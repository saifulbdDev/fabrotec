"use client";
import { useState, useEffect, useCallback } from "react";
import Head from "next/head";
import Card from "@/components/card/Card";
import { IProducts } from "@/types/product.type";
import Loader from "@/components/Loader";
import { useRouter } from "next/router";


export default function Home() {
  // const { push } = useRouter();
  const [category, setCategory] = useState("");
  const [categories, setCategories] = useState([]);
  const [data, setData] = useState([]);
  const [limit, setLimit] = useState(3);
  const [loading, setLoading] = useState(false);

  const loadMoreData = useCallback(async () => {
   
    if (!loading) {
      setLoading(true);
      const response = await fetch(
        `https://dummyjson.com/products?limit=${limit + 3}`
      );
      const json = await response.json();
      const newData = json.products;
      setData(newData);
      setLimit(limit + 3);
      setLoading(false);
    }
  }, [loading, limit]);
  const fetchData = async () => {
    const response = await fetch("https://dummyjson.com/products");
    const json = await response.json();
    const data = json.products;
    setData(data);
  };
  const fetchCategories = async () => {
    const response = await fetch("https://dummyjson.com/products/categories");
    const json = await response.json();

    setCategories(json);
  };

  useEffect(() => {
    const handleScroll = () => {
      if (
        window.innerHeight + document.documentElement.scrollTop >=
        document.documentElement.offsetHeight - 1
      ) {
        loadMoreData();
      }
    };

    window.addEventListener("scroll", handleScroll);
    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, [loadMoreData]);
  useEffect(() => {
    fetchData();
    fetchCategories();
  }, []);

 

  return (
    <>
      <Head>
        <title>Fabrotech FE-TEST</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>

     

        <div className="bg-gray-50">
        <h2>Scroll to bottom and the items will be updated</h2>
          {loading ? (
            <div className="mx-auto flex items-center justify-center min-h-screen">
              <Loader className="w-10 h-10" />
            </div>
          ) : (
            <div className="mx-auto max-w-2xl px-4 py-16 sm:px-6 sm:py-24 lg:max-w-7xl lg:px-8">
              <div className="grid grid-cols-2 items-center justify-between">
                <div className="">
                  <h2 className="text-2xl font-bold tracking-tight text-gray-900">
                    Products list
                  </h2>
                </div>

                <div className=" justify-end  flex items-center space-x-2 ">
                  <div className=" flex items-center space-x-2 ">
                    <span className="ml-4 text-black text-lg">
                      Filter by Category :
                    </span>
                    <select
                      id="category"
                      name="category"
                      onChange={(evt) => setCategory(evt.target.value)}
                      className="block  rounded-md border-0 px-3 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-red-600 sm:max-w-xs sm:text-sm sm:leading-6">
                      {categories?.map((item: string) => {
                        return (
                          <option value={item} key={item}>
                            {item}
                          </option>
                        );
                      })}
                    </select>
                  </div>
                  <div className=" flex items-center space-x-2 ">
                    {" "}
                    <span className="ml-4 text-black text-lg">Sort :</span>
                    <select
                      id="category"
                      name="category"
                      onChange={(evt) => setSort(evt.target.value)}
                      className="block  rounded-md border-0 px-3 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-red-600 sm:max-w-xs sm:text-sm sm:leading-6">
                      <option value="asc">asc</option>;
                      <option value="desc">desc</option>;
                    </select>
                  </div>
                </div>
              </div>
              <div className="mt-6 grid grid-cols-1 gap-x-3  sm:grid-cols-2 lg:grid-cols-4 xl:gap-6">
                {data.map((item) => (
                  <Card item={item} key={item?.id} />
                ))}
              </div>
            </div>
          )}
        </div>
      </main>
    </>
  );
}
